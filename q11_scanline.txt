#include<stdio.h>
#include<graphics.h>
#include<math.h>

//structure for holding 2D coordinates
typedef struct
{
    int x;
    int y;
} Point;

//structure for holding queue elements
typedef struct
{
    int x;
    int y;
} QueueElement;

//function to add an element to the queue
void enqueue(QueueElement queue[], int* rear, QueueElement value)
{
    queue[*rear] = value;
    (*rear)++;
}

//function to remove an element from the queue
QueueElement dequeue(QueueElement queue[], int* front)
{
    QueueElement value = queue[*front];
    (*front)++;
    return value;
}

int isInside(Point seed, Point vertices[], int numVertices)
{
    int i, j, c = 0;
    for (i = 0, j = numVertices - 1; i < numVertices; j = i++)
    {
        if (((vertices[i].y > seed.y) != (vertices[j].y > seed.y)) &&
                (seed.x < (vertices[j].x - vertices[i].x) * (seed.y - vertices[i].y) / (vertices[j].y - vertices[i].y) + vertices[i].x))
            c = !c;
    }
    return c;
}
//function to implement DDA algorithm for line drawing
void DDA(Point p1, Point p2)
{
    int dx = p2.x - p1.x;
    int dy = p2.y - p1.y;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    float xIncrement = dx / (float) steps;
    float yIncrement = dy / (float) steps;
    float x = p1.x, y = p1.y;
    for (int i = 0; i < steps; i++)
    {
        putpixel(round(x), round(y), WHITE);
        x += xIncrement;
        y += yIncrement;
    }
}



//function to implement scanline filling algorithm
void scanFill(Point vertices[], int numVertices)
{
    int minY = INT_MAX, maxY = INT_MIN;
    for (int i = 0; i < numVertices; i++)
    {
        if (vertices[i].y < minY)
        {
            minY = vertices[i].y;
        }
        if (vertices[i].y > maxY)
        {
            maxY = vertices[i].y;
        }
    }

    QueueElement queue[numVertices];
    int front = 0, rear = 0;

    for (int y = minY; y <= maxY; y++)
    {
        front = 0;
        rear = 0;
        int intersects[numVertices];
        int numIntersects = 0;
        for (int i = 0; i < numVertices; i++)
        {
            int j = (i + 1) % numVertices;
            if (vertices[i].y <= y && vertices[j].y > y ||
                    vertices[j].y <= y && vertices[i].y > y)
            {
                float x = (float)(vertices[i].x + (float)(y - vertices[i].y) / (vertices[j].y - vertices[i].y) * (vertices[j].x - vertices[i].x));
                intersects[numIntersects++] = x;
            }
        }
        if (numIntersects > 1)
        {
            //sort the intersection points
            for (int i = 0; i < numIntersects; i++)
            {
                for (int j = i + 1; j < numIntersects; j++)
                {
                    if (intersects[j] < intersects[i])
                    {
                        int temp = intersects[i];
                        intersects[i] = intersects[j];
                        intersects[j] = temp;
                    }
                }
            }

            //enqueue the intersection points
            for (int i = 0; i < numIntersects; i += 2)
            {
                QueueElement start = { intersects[i], y };
                QueueElement end = { intersects[i+1], y };
                enqueue(queue, &rear, start);
                enqueue(queue, &rear, end);
            }
        }

        //fill the scanline
        for (int i = 0; i < rear; i += 2)
        {
            Point startPoint = { queue[i].x, queue[i].y };
            Point endPoint = { queue[i+1].x, queue[i+1].y };
            DDA(startPoint, endPoint);
        }
    }
}


int main()
{
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int numVertices;
    printf("Enter the number of vertices of the polygon: ");
    scanf("%d", &numVertices);
    Point vertices[numVertices];
    for (int i = 0; i < numVertices; i++)
    {
        printf("Enter the x and y coordinates of vertex %d: ", i+1);
        scanf("%d %d", &vertices[i].x, &vertices[i].y);
    }

    //draw the polygon
    for (int i = 0; i < numVertices; i++)
    {
        int j = (i + 1) % numVertices;
        DDA(vertices[i], vertices[j]);
    }

    //fill the polygon
    scanFill(vertices, numVertices);

    getch();
    closegraph();
    return 0;
}

// (100, 100)
// (200, 100)
// (150, 150)
// (200, 200)
// (100, 200)
