#include <stdio.h>
#include <graphics.h>

typedef struct {
    int x, y;
} Point;

// Function to find intersection point of a line with a clip boundary
Point intersect(Point p1, Point p2, int x1, int y1, int x2, int y2) {
    Point intersect_point;
    float m = (float)(p2.y - p1.y) / (p2.x - p1.x);
    float b = p1.y - m * p1.x;

    // If line is parallel to boundary, return original point
    if (x1 == x2) {
        intersect_point.x = x1;
        intersect_point.y = m * x1 + b;
    } else {
        float x = (float)(y1 - b) / m;
        intersect_point.x = x;
        intersect_point.y = y1;
    }
    return intersect_point;
}

// Function to perform polygon clipping
void sutherlandHodgman(Point subject[], int n, int x1, int y1, int x2, int y2) {
    Point clipper[4] = {{x1, y1}, {x2, y1}, {x2, y2}, {x1, y2}};
    Point result[20];
    int k = 0;

    for (int i = 0; i < n; i++) {
        Point current = subject[i];
        Point prev = subject[(i + n - 1) % n];

        if ((current.x >= x1 && current.x <= x2) && (current.y >= y1 && current.y <= y2)) {
            if ((prev.x >= x1 && prev.x <= x2) && (prev.y >= y1 && prev.y <= y2)) {
                result[k++] = current;
            } else {
                result[k++] = intersect(prev, current, x1, y1, x2, y1);
                result[k++] = current;
            }
        } else if ((prev.x >= x1 && prev.x <= x2) && (prev.y >= y1 && prev.y <= y2)) {
            result[k++] = intersect(prev, current, x1, y1, x2, y1);
        }
    }

    cleardevice();
    setcolor(RED);
    rectangle(x1, y1, x2, y2);

    setcolor(WHITE);
    for (int i = 0; i < k; i++) {
        int next = (i + 1) % k;
        line(result[i].x, result[i].y, result[next].x, result[next].y);
    }
}

int main() {
    int gd = DETECT, gm;
    int x1, y1, x2, y2;
    int n;
    Point subject[20];

    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    printf("Enter the minimum and maximum coordinates of the clipping window (x1 y1 x2 y2): ");
    scanf("%d %d %d %d", &x1, &y1, &x2, &y2);

    printf("Enter the number of vertices of the subject polygon: ");
    scanf("%d", &n);

    printf("Enter the coordinates of the subject polygon vertices:\n");
    for (int i = 0; i < n; i++) {
        printf("Vertex %d: ", i + 1);
        scanf("%d %d", &subject[i].x, &subject[i].y);
    }

    sutherlandHodgman(subject, n, x1, y1, x2, y2);

    getch();
    closegraph();
    return 0;
}


// (150, 150, 350, 350) // window
// 5 vertices.
// (100, 100)(200, 100)(150, 150)(200, 200)(100 200)